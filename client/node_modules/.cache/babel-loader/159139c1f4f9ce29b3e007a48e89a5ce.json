{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/firestore';\nconst Config = {\n  apiKey: \"AIzaSyBUDi-GL0lt8a_IRSYwHRVzo9-fxcnpIK4\",\n  authDomain: \"crwn-db-d44b2.firebaseapp.com\",\n  databaseURL: \"https://crwn-db-d44b2.firebaseio.com\",\n  projectId: \"crwn-db-d44b2\",\n  storageBucket: \"crwn-db-d44b2.appspot.com\",\n  messagingSenderId: \"246443045802\",\n  appId: \"1:246443045802:web:c213388ad0ae03443d71d3\",\n  measurementId: \"G-FKTXQW7JVD\"\n};\nfirebase.initializeApp(Config);\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) {\n    return;\n  }\n\n  ;\n  const userRef = firestore.doc(`users/${userAuth.uid}`);\n  const snapShot = await userRef.get();\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('Error creating user ,', error.message);\n    }\n  }\n\n  ;\n  return userRef;\n};\nexport const addCollectionAndDocuments = async (collectionKey, objecctsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  const batch = firestore.batch();\n  objecctsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit();\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollections = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      id: doc.id,\n      routeName: encodeURI(title.toLowerCase()),\n      items,\n      title\n    };\n  });\n  return transformedCollections.reduce((accumulator, collection) => {\n    accumulator[collection.title.toLowerCase()] = collection;\n    return accumulator;\n  }, {});\n};\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const googleProvider = new firebase.auth.GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const getCurrentUser = () => {\n  return new Promise((resolve, reject) => {\n    const unsubscribeFromAuth = auth.onAuthStateChanged(user => {\n      //unsubscribeFromAuth();\n      resolve(user);\n    }, reject);\n  });\n}; //export const signInWithGoogle=()=> auth.signInWithPopup(googleProvider);\n\nexport default firebase;","map":{"version":3,"sources":["C:/Users/George/Desktop/React/crwn-clothing/src/firebase/firebase.utils.js"],"names":["firebase","Config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","initializeApp","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","addCollectionAndDocuments","collectionKey","objecctsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","convertCollectionsSnapshotToMap","collections","transformedCollections","docs","map","title","items","data","id","routeName","encodeURI","toLowerCase","reduce","accumulator","auth","googleProvider","GoogleAuthProvider","setCustomParameters","prompt","getCurrentUser","Promise","resolve","reject","unsubscribeFromAuth","onAuthStateChanged","user"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\nconst Config = {\r\n    apiKey: \"AIzaSyBUDi-GL0lt8a_IRSYwHRVzo9-fxcnpIK4\",\r\n    authDomain: \"crwn-db-d44b2.firebaseapp.com\",\r\n    databaseURL: \"https://crwn-db-d44b2.firebaseio.com\",\r\n    projectId: \"crwn-db-d44b2\",\r\n    storageBucket: \"crwn-db-d44b2.appspot.com\",\r\n    messagingSenderId: \"246443045802\",\r\n    appId: \"1:246443045802:web:c213388ad0ae03443d71d3\",\r\n    measurementId: \"G-FKTXQW7JVD\"\r\n  }\r\n\r\n  firebase.initializeApp(Config);\r\n\r\n  export const createUserProfileDocument= async(userAuth,additionalData )=>{\r\n    if(!userAuth) {return};\r\n    const userRef = firestore.doc(`users/${userAuth.uid}`);\r\n    const snapShot =await  userRef.get();\r\n    if(!snapShot.exists){\r\n      const {displayName, email}= userAuth;\r\n      const createdAt = new Date()\r\n      try {\r\n        userRef.set({\r\n          displayName, \r\n          email, \r\n          createdAt,\r\n          ...additionalData\r\n        })\r\n      } catch(error){\r\n        console.log('Error creating user ,', error.message);\r\n      }\r\n\r\n    };\r\n    return userRef;\r\n  }\r\n\r\n  export const addCollectionAndDocuments=async (collectionKey, objecctsToAdd)=>{\r\n    const collectionRef = firestore.collection(collectionKey);\r\n    const batch = firestore.batch();\r\n    \r\n    objecctsToAdd.forEach(obj => {\r\n      const newDocRef = collectionRef.doc();\r\n      batch.set(newDocRef, obj);\r\n      \r\n    });\r\n\r\n    return await batch.commit();\r\n\r\n  }\r\n\r\n  export const convertCollectionsSnapshotToMap= (collections)=>{\r\n    const transformedCollections = collections.docs.map(doc=>{\r\n      const {title, items}= doc.data();\r\n      return {id:doc.id, routeName: encodeURI(title.toLowerCase()), items, title}\r\n    })\r\n    \r\n  \r\n    return( transformedCollections.reduce((accumulator, collection)=>{\r\n       accumulator[collection.title.toLowerCase()] = collection;\r\n       return accumulator;\r\n    },{}))\r\n  \r\n  }\r\n\r\n  export const auth = firebase.auth();\r\n  export const firestore = firebase.firestore();\r\n\r\n  export const googleProvider = new firebase.auth.GoogleAuthProvider();\r\n\r\n  googleProvider.setCustomParameters({prompt: 'select_account'});\r\n  \r\n  export const getCurrentUser =()=> {\r\n    return new Promise((resolve, reject)=>{\r\n      const unsubscribeFromAuth = auth.onAuthStateChanged(user=>{\r\n        //unsubscribeFromAuth();\r\n        resolve(user)\r\n      }, reject)\r\n\r\n    })\r\n  }\r\n  //export const signInWithGoogle=()=> auth.signInWithPopup(googleProvider);\r\n  \r\n  export default firebase;"]},"metadata":{},"sourceType":"module"}